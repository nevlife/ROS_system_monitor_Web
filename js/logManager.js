class LogManager {
    constructor() {
        this.logContainer = document.getElementById("log-container");
        this.maxLogs = 200;
        this.logCount = 0;
    }

    log(message, level = "info", withTimestamp = true) {
        let logEntry = document.createElement("div");
        logEntry.className = `log-entry ${level}`;

        let timestamp = "";
        if (withTimestamp) {
            timestamp = `[${new Date().toLocaleTimeString()}] `;
        }

        // Î°úÍ∑∏ Î†àÎ≤®Ïóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò Ï∂îÍ∞Ä
        let icon = "";
        switch (level) {
            case "error":
                icon = "‚ùå ";
                break;
            case "warning":
                icon = "‚ö†Ô∏è ";
                break;
            case "info":
                icon = "‚ÑπÔ∏è ";
                break;
            default:
                icon = "üìù ";
        }

        logEntry.innerHTML = `
            <div style="display: flex; align-items: flex-start; gap: 6px; line-height: 1.4;">
                <span style="flex-shrink: 0;">${icon}</span>
                <span style="font-weight: 500; color: #bdc3c7; flex-shrink: 0;">${timestamp}</span>
                <span style="flex: 1;">${message}</span>
            </div>
        `;

        // Î°úÍ∑∏ Í∞úÏàò Ï†úÌïú
        if (this.logCount >= this.maxLogs) {
            this.logContainer.removeChild(this.logContainer.firstChild);
        } else {
            this.logCount++;
        }

        this.logContainer.appendChild(logEntry);

        // Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏïÑÎûòÎ°ú (Î∂ÄÎìúÎü¨Ïö¥ Ïï†ÎãàÎ©îÏù¥ÏÖò)
        this.logContainer.scrollTo({
            top: this.logContainer.scrollHeight,
            behavior: 'smooth'
        });

        // ÏÉà Î°úÍ∑∏ Ìï≠Î™©Ïóê ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º
        logEntry.style.opacity = "0";
        logEntry.style.transform = "translateX(-10px)";
        
        setTimeout(() => {
            logEntry.style.transition = "all 0.3s ease";
            logEntry.style.opacity = "1";
            logEntry.style.transform = "translateX(0)";
        }, 10);
    }

    error(message) {
        this.log(message, "error");
        // ÏóêÎü¨ Î°úÍ∑∏Îäî Î∏åÎùºÏö∞Ï†Ä ÏΩòÏÜîÏóêÎèÑ Ï∂úÎ†•
        console.error(`[ROS Monitor] ${message}`);
    }

    warning(message) {
        this.log(message, "warning");
        // Í≤ΩÍ≥† Î°úÍ∑∏Îäî Î∏åÎùºÏö∞Ï†Ä ÏΩòÏÜîÏóêÎèÑ Ï∂úÎ†•
        console.warn(`[ROS Monitor] ${message}`);
    }

    info(message) {
        this.log(message, "info");
        // Ï†ïÎ≥¥ Î°úÍ∑∏Îäî Î∏åÎùºÏö∞Ï†Ä ÏΩòÏÜîÏóêÎèÑ Ï∂úÎ†•
        console.info(`[ROS Monitor] ${message}`);
    }

    // Î°úÍ∑∏ ÌÅ¥Î¶¨Ïñ¥ Í∏∞Îä• Ï∂îÍ∞Ä
    clear() {
        this.logContainer.innerHTML = "";
        this.logCount = 0;
        this.log("Î°úÍ∑∏Í∞Ä ÌÅ¥Î¶¨Ïñ¥ÎêòÏóàÏäµÎãàÎã§.", "info");
    }

    // Î°úÍ∑∏ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Í∏∞Îä• Ï∂îÍ∞Ä
    export() {
        const logs = Array.from(this.logContainer.children).map(entry => {
            return entry.textContent;
        });
        
        const logText = logs.join('\n');
        const blob = new Blob([logText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `ros_monitor_logs_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.log("Î°úÍ∑∏Í∞Ä ÌååÏùºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Ï°åÏäµÎãàÎã§.", "info");
    }
}
